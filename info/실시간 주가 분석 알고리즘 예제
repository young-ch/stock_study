* 수정 해야 할 부분
    ** 주의! 파일 별로 버전이 다를 수 있으니 각각의 파일을 모두 확인하셔야합니다
    [open_api.py, daily_buy_list.py]
        ** open_api.py, daily_buy_list.py 코드 상단에 #version 1.3.1 보다 낮은 버전 이거나, 명시 되어 있지 않는 경우
            => ch4 '종목리스트 저장하기 챕터' 첨부파일의 library 폴더에서 open_api.py, daily_buy_list.py 파일 교체
    [trader.py]
         ** trader.py 코드 상단에 #version 1.3.1 보다 낮은 버전 이거나, 명시 되어 있지 않는 경우
            => ch7 '윈도우 배치파일,작업스케줄러를 활용해 자동 봇 실행 파일 만들기' 첨부파일의 trader.py 파일 교체

    [simulator_func_mysql.py]
        ** version 1.3.1 상위 버전 포함 모두 적용
            => 변수 설정 함수(variable_setting)에 아래 12, 13, 14 알고리즘 추가
                    if self.simul_num in (1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14):
                        # 시뮬레이팅 시작 일자(분 별 시뮬레이션의 경우 최근 1년 치 데이터만 있기 때문에 start_date 조정 필요)
                        self.simul_start_date = "20190101"

                        ######### 알고리즘 선택 #############
                        # 매수 리스트 설정 알고리즘 번호
                        self.db_to_realtime_daily_buy_list_num = 1

                        # 매도 리스트 설정 알고리즘 번호
                        self.sell_list_num = 1
                        ###################################

                        # 초기 투자자금(시뮬레이션에서의 초기 투자 금액. 모의투자는 신청 당시의 금액이 초기 투자 금액이라고 보시면 됩니다)
                        # 주의! start_invest_price 는 모의투자 초기 자본금과 별개. 시뮬레이션에서만 적용.
                        # 키움증권 모의투자의 경우 초기에 모의투자 신청 할 때 설정 한 금액으로 자본금이 설정됨
                        self.start_invest_price = 10000000

                        # 매수 금액
                        self.invest_unit = 1000000

                        # 자산 중 최소로 남겨 둘 금액
                        self.limit_money = 3000000

                        # 익절 수익률 기준치
                        self.sell_point = 10

                        # 손절 수익률 기준치
                        self.losscut_point = -2

                        # 실전/모의 봇 돌릴 때 매수하는 순간 종목의 최신 종가 보다 1% 이상 오른 경우 사지 않도록 하는 설정(변경 가능)
                        self.invest_limit_rate = 1.01
                        # 실전/모의 봇 돌릴 때 매수하는 순간 종목의 최신 종가 보다 -2% 이하로 떨어진 경우 사지 않도록 하는 설정(변경 가능)
                        self.invest_min_limit_rate = 0.98

                        if self.simul_num == 4:
                            self.db_to_realtime_daily_buy_list_num = 4
                            self.interval_month = 3
                            self.invest_unit = 50000

                        elif self.simul_num == 5:
                            self.db_to_realtime_daily_buy_list_num = 5
                            self.total_transaction_price = 10000000000
                            self.interval_month = 3
                            self.vol_mul = 3
                            self.d1_diff = 2
                            # self.use_min= True
                            # self.only_nine_buy = False

                        elif self.simul_num == 6:
                            self.db_to_realtime_daily_buy_list_num = 6

                    # 절대 모멘텀 / 상대 모멘텀
                        elif self.simul_num in (7,8,9,10) :
                            # 매수 리스트 설정 알고리즘 번호(절대모멘텀 code ver)
                            self.db_to_realtime_daily_buy_list_num = 7
                            # 매도 리스트 설정 알고리즘 번호(절대모멘텀 code ver)

                            self.sell_list_num = 4
                            # n일 전 종가 데이터를 가져올지 설정 (ex. 20 -> 장이 열리는 날 기준 20일 이니까 기간으로 보면 약 한 달, 250일->1년)
                            self.day_before = 20 # 단위 일
                            # n일 전 종가 대비 현재 종가(현재가)가 몇 프로 증가 했을 때 매수, 몇 프로 떨어졌을 때 매도 할 지 설정(0으로 설정 시 단순히 증가 했을 때 매수, 감소 했을 때 매도)
                            self.diff_point = 1 # 단위 %
                            # 분별 시뮬레이션 옵션
                            self.use_min = True
                            self.only_nine_buy = True

                            if self.simul_num == 8:
                                # 매수 리스트 설정 알고리즘 번호 (절대모멘텀 query ver)
                                self.db_to_realtime_daily_buy_list_num = 8
                                # 매도 리스트 설정 알고리즘 번호 (절대모멘텀 query ver)
                                self.sell_list_num = 5

                            elif self.simul_num == 9 :
                                # 매수 리스트 설정 알고리즘 번호 (절대모멘텀 query ver)
                                self.db_to_realtime_daily_buy_list_num = 8
                                # 매도 리스트 설정 알고리즘 번호 (절대모멘텀 query ver + losscut point 추가)
                                self.sell_list_num = 6
                                # 손절 수익률 기준치
                                self.losscut_point = -2

                            elif self.simul_num == 10:
                                # 매수 리스트 설정 알고리즘 번호 (상대모멘텀 query ver)
                                self.db_to_realtime_daily_buy_list_num = 9
                                # 매도 리스트 설정 알고리즘 번호 (절대모멘텀 query ver + losscut point 추가)
                                self.sell_list_num = 5

                        elif self.simul_num == 11:
                            self.use_ai = True  # ai 알고리즘 사용 시 True 사용 안하면 False
                            self.ai_filter_num = 1  # ai 알고리즘 선택

                        # 실시간 조건 매수
                        elif self.simul_num in (12,13,14):
                            self.simul_start_date = "20200101"
                            self.use_min = True
                            # 아침 9시에만 매수를 하고 싶은 경우 True, 9시가 아니어도 매수를 하고 싶은 경우 False(분별 시뮬레이션, trader 적용 가능 / 일별 시뮬레이션은 9시에만 매수, 매도)
                            self.only_nine_buy = False
                            # 실시간 조건 매수 옵션 (고급 챕터에서 소개) self.only_nine_buy 옵션을 반드시 False로 설정해야함
                            self.trade_check_num = 1  # 실시간 조건 매수 알고리즘 선택 (1,2,3..)
                            # 특정 거래대금 보다 x배 이상 증가 할 경우 매수
                            self.volume_up = 2
                            #
                            if self.simul_num == 13:
                                self.trade_check_num = 2
                                # 매수하는 순간 종목의 최신 종가 보다 1% 이상 오른 경우 사지 않도록 하는 설정(변경 가능)
                                self.invest_limit_rate = 1.01
                                # 매수하는 순간 종목의 최신 종가 보다 -2% 이하로 떨어진 경우 사지 않도록 하는 설정(변경 가능)
                                self.invest_min_limit_rate = 0.98

                            # 래리윌리엄스 변동성 돌파 전략
                            elif self.simul_num == 14:
                                self.trade_check_num = 3
                                self.rarry_k = 0.5

                    elif self.simul_num == 2:
                        # 시뮬레이팅 시작 일자
                        self.simul_start_date = "20190101"

                        ######### 알고리즘 선택 #############
                        # 매수 리스트 설정 알고리즘 번호
                        self.db_to_realtime_daily_buy_list_num = 1
                        # 매도 리스트 설정 알고리즘 번호
                        self.sell_list_num = 2
                        ###################################
                        # 초기 투자자금
                        # 주의! start_invest_price 는 모의투자 초기 자본금과 별개. 시뮬레이션에서만 적용.
                        # 키움증권 모의투자의 경우 초기에 모의투자 신청 할 때 설정 한 금액으로 자본금이 설정됨
                        self.start_invest_price = 10000000
                        # 매수 금액
                        self.invest_unit = 1000000

                        # 자산 중 최소로 남겨 둘 금액
                        self.limit_money = 1000000
                        # # 익절 수익률 기준치
                        self.sell_point = False
                        # 손절 수익률 기준치
                        self.losscut_point = -2
                        # 실전/모의 봇 돌릴 때 매수하는 순간 종목의 최신 종가 보다 1% 이상 오른 경우 사지 않도록 하는 설정(변경 가능)
                        self.invest_limit_rate = 1.01
                        # 실전/모의 봇 돌릴 때 매수하는 순간 종목의 최신 종가 보다 -2% 이하로 떨어진 경우 사지 않도록 하는 설정(변경 가능)
                        self.invest_min_limit_rate = 0.98


                    elif self.simul_num == 3:

                        # 시뮬레이팅 시작 일자

                        self.simul_start_date = "20190101"

                        ######### 알고리즘 선택 #############

                        # 매수 리스트 설정 알고리즘 번호

                        self.db_to_realtime_daily_buy_list_num = 3

                        # 매도 리스트 설정 알고리즘 번호

                        self.sell_list_num = 2

                        ###################################

                        # 초기 투자자금
                        # 주의! start_invest_price 는 모의투자 초기 자본금과 별개. 시뮬레이션에서만 적용.
                        # 키움증권 모의투자의 경우 초기에 모의투자 신청 할 때 설정 한 금액으로 자본금이 설정됨
                        self.start_invest_price = 10000000

                        # 매수 금액
                        self.invest_unit = 3000000

                        # 자산 중 최소로 남겨 둘 금액
                        self.limit_money = 1000000

                        # 익절 수익률 기준치
                        self.sell_point = 10

                        # 손절 수익률 기준치
                        self.losscut_point = -2

                        # 실전/모의 봇 돌릴 때 매수하는 순간 종목의 최신 종가 보다 1% 이상 오른 경우 사지 않도록 하는 설정(변경 가능)
                        self.invest_limit_rate = 1.01
                        # 실전/모의 봇 돌릴 때 매수하는 순간 종목의 최신 종가 보다 -2% 이하로 떨어진 경우 사지 않도록 하는 설정(변경 가능)
                        self.invest_min_limit_rate = 0.98
                    else:
                        logger.error("해당 되는 알고리즘이 없습니다. 알고리즘을 추가해주세요. ")
                        sys.exit(1)


        ** 코드 상단에 # version 1.3.1 보다 낮은 버전 이거나, 명시 되어 있지 않는 경우
              1. variable_setting 함수 조건문 가장 끝에 else 부분 추가
                      else:
                            logger.error("해당 되는 알고리즘이 없습니다. 알고리즘을 추가해주세요. ")
                            sys.exit(1)


              2. def trading_by_min 함수에 아래 내용 추가
                self.print_info(date_rows_today) 부분 바로 아래에 아래 로직 추가
                ````````````````````````````````````````````````````````````
                 # all_item_db가 존재하고, 현재 보유 중인 종목이 있다면 아래 로직을 들어간다.
                 if self.is_simul_table_exist(self.db_name, "all_item_db") and len(self.get_data_from_possessed_item()) != 0:
                    # 보유 중인 종목들의 주가를 일별로 업데이트 하는 함수(분별 종가 업데이트 이외에 clo5, clo20등등의 값을 업데이트)
                    self.update_all_db_by_date(date_rows_today)

                ````````````````````````````````````````````````````````````

              3.  trade_check 함수 추가
                def db_to_realtime_daily_buy_list 함수 부분 바로 위에 trade_check 함수 추가
                ````````````````````````````````````````````````````````````````````````````````````````````````
                 # 실시간 매수 체크 확인 함수 (느낌표 골뱅이 추가하면 검색 시 편합니다) (고급클래스에서 소개)
                def trade_check(self, df_row, open_price, current_price, current_sum_volume):
                    '''
                    :param df_row: 매수 종목 리스트(realtime_daily_buy_list)
                    :param current_price: (현재가)
                    :param current_sum_volume: (현재 누적 거래량)
                    :return: True (매수), False(매수 X)
                    '''
                    code_name = df_row['code_name']
                    yes_vol20 = df_row['vol20']
                    yes_close = df_row['close']
                    yes_high = df_row['high']
                    yes_low = df_row['low']
                    yes_volume = df_row['volume']
                    # 실시간 거래 대금 체크 알고리즘
                    if self.trade_check_num == 1:
                        # 어제 거래 대금
                        yes_total_tr_price = yes_close * yes_volume
                        # 현재 거래 대금
                        current_total_tr_price = current_price * current_sum_volume
                        # 어제 종가 보다 현재가가 증가했고, 거래 대금이 어제 거래대금에 비해서 x배 올라갔을 때 매수
                        if current_price > yes_close and current_total_tr_price > yes_total_tr_price * self.volume_up:
                            return True
                        else:
                            return False

                    elif self.trade_check_num == 2:
                        # 매수 가격 최저 범위
                        min_buy_limit = int(yes_close) * self.invest_min_limit_rate
                        # 매수 가격 최고 범위
                        max_buy_limit = int(yes_close) * self.invest_limit_rate
                        # 현재가가 매수 가격 최저 범위와 매수 가격 최고 범위 안에 들어와 있다면 매수 한다.
                        if min_buy_limit < current_price < max_buy_limit:
                            return True
                        else:
                            return False

                    #래리 윌리엄스 변동성 돌파 알고리즘(매수)
                    elif self.trade_check_num == 3:
                        # 변동폭(_range): 전일 고가(yes_high)에서 전일 저가(yes_low)를 뺀 가격
                        # 매수시점 : 현재가 > 시작가 + (변동폭 * k)  [k는 0 ~ 1 사이 수]
                        _range = yes_high - yes_low
                        if open_price + _range * self.rarry_k < current_price:
                            return True
                        else:
                            return False

                    else:
                        logger.debug("trade_check 함수에 self.trade_check_num = {} 에 맞는 알고리즘이 없습니다. ".format(self.trade_check_num))
                        exit(1)
                    ````````````````````````````````````````````````````````````````````````````````````````````````

             4. variable_setting 함수 self.buy_stop = False 아래에 self.trade_check_num 변수 추가
                    ````````````````````````````````````````````````````````````````````````````````````````````````
                      # 실시간 조건 매수 옵션 (고급 챕터에서 소개)
                        # self.only_nine_buy 옵션을 반드시 False로 설정해야함
                        # self.use_min 옵션이 반드시 True로 설정이 되어야함
                        # 실시간 조건 매수 알고리즘 선택 (1,2,3..)
                        self.trade_check_num = False
                    ````````````````````````````````````````````````````````````````````````````````````````````````

             5. def auto_trade_stock_realtime 함수에 아래 내용 추가
                self.invest_send_order 바로 위에 추가
                ````````````````````````````````````````````````````````````````````````````````````````````````
                if self.use_min and not self.only_nine_buy and self.trade_check_num :
                    # 시작가
                    open = self.get_now_open_price_by_date(code, date_rows_today)
                    # 당일 누적 거래량
                    sum_volume = self.get_now_volume_by_min(code_name, min_date)

                    # open, sum_volume 값이 존재 할 경우
                    if open and sum_volume:
                        # 매수 할 종목에 대한 dataframe row와, 시작가, 현재가, 분별 누적 거래량 정보를 전달
                        if not self.trade_check(self.df_realtime_daily_buy_list.loc[j], open, price, sum_volume):
                            # 실시간 매수 조건에 맞지 않는 경우 pass
                            continue
                ````````````````````````````````````````````````````````````````````````````````````````````````



            6. def get_now_volume_by_min 함수 추가
                    def get_now_close_price_by_min 함수 위에 추가

                    ````````````````````````````````````````````````````````````````````````````````````````````````
                    # 분별 현재 누적 거래량 가져오는 함수
                    def get_now_volume_by_min(self, code_name, min_date):
                        sql = "select sum_volume from `" + code_name + "` where date = '%s' and open != 0 and volume !=0 order by sum_volume desc limit 1"
                        rows = self.engine_craw.execute(sql % (min_date)).fetchall()
                        if len(rows) == 1:
                            return rows[0][0]
                        else:
                            return False
                    ````````````````````````````````````````````````````````````````````````````````````````````````

            7. 가장 상단에 라이브러리 추가
                 ````````````````````````````````````````````````````````````````````````````````````````````````
                from sqlalchemy import event
                ````````````````````````````````````````````````````````````````````````````````````````````````


            8.def db_name_setting 함수에 self.db_conn 바로 위에 아래 내용 추가
                ````````````````````````````````````````````````````````````````````````````````````````````````
                from library.open_api import escape_percentage
                event.listen(self.engine_simulator, 'before_execute', escape_percentage, retval=True)
                event.listen(self.engine_daily_craw, 'before_execute', escape_percentage, retval=True)
                event.listen(self.engine_craw, 'before_execute', escape_percentage, retval=True)
                event.listen(self.engine_daily_buy_list, 'before_execute', escape_percentage, retval=True)
                ````````````````````````````````````````````````````````````````````````````````````````````````
