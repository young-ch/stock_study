[추가 코드]
    1. simulator_func_mysql.py
        a) variable_setting 함수에서 self.trade_check_num = False 아래에 추가
        `````````````````````````````````````````````````````````````````````````````````````````````````````````
        # 네이버 실시간 크롤링 사용 여부 [True 사용, False 비사용]
        # 실시간 크롤링이기 때문에 시뮬레이션은 불가. 모의투자만 사용가능
        # 사용 방법 :
        # 1. 아래 두개 옵션을 복사해서 원하는 알고리즘에 넣고 True로 변경.
        # 2. 실시간 네이버크롤링 매수 알고리즘 번호를 설정(self.db_to_realtime_daily_buy_list_num)
        # 3. self.only_nine_buy = True 로 설정하면 원하는 시간(buy_start_time)에 한번만 realtime_daily_buy_list를 만들고 조건에 맞는 종목들을 매수
        # 4. 만약 only_nine_buy 를 False 로 설정하면 실시간으로 realtime_daily_buy_list를 만들고 조건에 맞는 종목들을 매수
        # 5. 유의 사항 : trader.py 의 variable_setting 함수에 self.buy_end_time 설정
        self.use_realtime_crawl = False
        self.buy_start_time = QTime(9, 00, 0)

        `````````````````````````````````````````````````````````````````````````````````````````````````````````
        b) variable_setting 함수에 아래 15번 알고리즘 추가

        `````````````````````````````````````````````````````````````````````````````````````````````````````````
        if self.simul_num in (1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15):
            # 시뮬레이팅 시작 일자(분 별 시뮬레이션의 경우 최근 1년 치 데이터만 있기 때문에 start_date 조정 필요)
            self.simul_start_date = "20190101"

            ######### 알고리즘 선택 #############
            # 매수 리스트 설정 알고리즘 번호
            self.db_to_realtime_daily_buy_list_num = 1

            # 매도 리스트 설정 알고리즘 번호
            self.sell_list_num = 1
            ###################################

            # 초기 투자자금(시뮬레이션에서의 초기 투자 금액. 모의투자는 신청 당시의 금액이 초기 투자 금액이라고 보시면 됩니다)
            # 주의! start_invest_price 는 모의투자 초기 자본금과 별개. 시뮬레이션에서만 적용.
            # 키움증권 모의투자의 경우 초기에 모의투자 신청 할 때 설정 한 금액으로 자본금이 설정됨
            self.start_invest_price = 10000000

            # 매수 금액
            self.invest_unit = 1000000

            # 자산 중 최소로 남겨 둘 금액
            self.limit_money = 3000000

            # 익절 수익률 기준치
            self.sell_point = 10

            # 손절 수익률 기준치
            self.losscut_point = -2

            # 실전/모의 봇 돌릴 때 매수하는 순간 종목의 최신 종가 보다 1% 이상 오른 경우 사지 않도록 하는 설정(변경 가능)
            self.invest_limit_rate = 1.01
            # 실전/모의 봇 돌릴 때 매수하는 순간 종목의 최신 종가 보다 -2% 이하로 떨어진 경우 사지 않도록 하는 설정(변경 가능)
            self.invest_min_limit_rate = 0.98

            if self.simul_num == 4:
                self.db_to_realtime_daily_buy_list_num = 4
                self.interval_month = 3
                self.invest_unit = 50000

            elif self.simul_num == 5:
                self.db_to_realtime_daily_buy_list_num = 5
                self.total_transaction_price = 10000000000
                self.interval_month = 3
                self.vol_mul = 3
                self.d1_diff = 2
                # self.use_min= True
                # self.only_nine_buy = False

            elif self.simul_num == 6:
                self.db_to_realtime_daily_buy_list_num = 6

            # 절대 모멘텀 / 상대 모멘텀
            elif self.simul_num in (7, 8, 9, 10):
                # 매수 리스트 설정 알고리즘 번호(절대모멘텀 code ver)
                self.db_to_realtime_daily_buy_list_num = 7
                # 매도 리스트 설정 알고리즘 번호(절대모멘텀 code ver)

                self.sell_list_num = 4
                # n일 전 종가 데이터를 가져올지 설정 (ex. 20 -> 장이 열리는 날 기준 20일 이니까 기간으로 보면 약 한 달, 250일->1년)
                self.day_before = 20  # 단위 일
                # n일 전 종가 대비 현재 종가(현재가)가 몇 프로 증가 했을 때 매수, 몇 프로 떨어졌을 때 매도 할 지 설정(0으로 설정 시 단순히 증가 했을 때 매수, 감소 했을 때 매도)
                self.diff_point = 1  # 단위 %
                # 분별 시뮬레이션 옵션
                self.use_min = True
                self.only_nine_buy = True

                if self.simul_num == 8:
                    # 매수 리스트 설정 알고리즘 번호 (절대모멘텀 query ver)
                    self.db_to_realtime_daily_buy_list_num = 8
                    # 매도 리스트 설정 알고리즘 번호 (절대모멘텀 query ver)
                    self.sell_list_num = 5

                elif self.simul_num == 9:
                    # 매수 리스트 설정 알고리즘 번호 (절대모멘텀 query ver)
                    self.db_to_realtime_daily_buy_list_num = 8
                    # 매도 리스트 설정 알고리즘 번호 (절대모멘텀 query ver + losscut point 추가)
                    self.sell_list_num = 6
                    # 손절 수익률 기준치
                    self.losscut_point = -2

                elif self.simul_num == 10:
                    # 매수 리스트 설정 알고리즘 번호 (상대모멘텀 query ver)
                    self.db_to_realtime_daily_buy_list_num = 9
                    # 매도 리스트 설정 알고리즘 번호 (절대모멘텀 query ver + losscut point 추가)
                    self.sell_list_num = 5

            elif self.simul_num == 11:
                self.use_ai = True  # ai 알고리즘 사용 시 True 사용 안하면 False
                self.ai_filter_num = 1  # ai 알고리즘 선택

            # 실시간 조건 매수
            elif self.simul_num in (12, 13, 14):
                self.simul_start_date = "20200101"
                self.use_min = True
                # 아침 9시에만 매수를 하고 싶은 경우 True, 9시가 아니어도 매수를 하고 싶은 경우 False(분별 시뮬레이션, trader 적용 가능 / 일별 시뮬레이션은 9시에만 매수, 매도)
                self.only_nine_buy = False
                # 실시간 조건 매수 옵션 (고급 챕터에서 소개) self.only_nine_buy 옵션을 반드시 False로 설정해야함
                self.trade_check_num = 1  # 실시간 조건 매수 알고리즘 선택 (1,2,3..)
                # 특정 거래대금 보다 x배 이상 증가 할 경우 매수
                self.volume_up = 2
                #
                if self.simul_num == 13:
                    self.trade_check_num = 2
                    # 매수하는 순간 종목의 최신 종가 보다 1% 이상 오른 경우 사지 않도록 하는 설정(변경 가능)
                    self.invest_limit_rate = 1.01
                    # 매수하는 순간 종목의 최신 종가 보다 -2% 이하로 떨어진 경우 사지 않도록 하는 설정(변경 가능)
                    self.invest_min_limit_rate = 0.98

                # 래리윌리엄스 변동성 돌파 전략
                elif self.simul_num == 14:
                    self.trade_check_num = 3
                    self.rarry_k = 0.5

             elif self.simul_num == 15:
                # 하루에 한번 매수 여부
                self.only_nine_buy = True
                # naver crawling 사용 여부
                self.use_realtime_crawl = True
                # naver crawling 매수 알고리즘
                self.db_to_realtime_daily_buy_list_num = 10
                # 매수 시작 시간
                self.buy_start_time = QTime(9, 30, 0)
                # 거래대금
                self.total_tr_price = 1000000000


        elif self.simul_num == 2:
            # 시뮬레이팅 시작 일자
            self.simul_start_date = "20190101"

            ######### 알고리즘 선택 #############
            # 매수 리스트 설정 알고리즘 번호
            self.db_to_realtime_daily_buy_list_num = 1
            # 매도 리스트 설정 알고리즘 번호
            self.sell_list_num = 2
            ###################################
            # 초기 투자자금
            # 주의! start_invest_price 는 모의투자 초기 자본금과 별개. 시뮬레이션에서만 적용.
            # 키움증권 모의투자의 경우 초기에 모의투자 신청 할 때 설정 한 금액으로 자본금이 설정됨
            self.start_invest_price = 10000000
            # 매수 금액
            self.invest_unit = 1000000

            # 자산 중 최소로 남겨 둘 금액
            self.limit_money = 1000000
            # # 익절 수익률 기준치
            self.sell_point = False
            # 손절 수익률 기준치
            self.losscut_point = -2
            # 실전/모의 봇 돌릴 때 매수하는 순간 종목의 최신 종가 보다 1% 이상 오른 경우 사지 않도록 하는 설정(변경 가능)
            self.invest_limit_rate = 1.01
            # 실전/모의 봇 돌릴 때 매수하는 순간 종목의 최신 종가 보다 -2% 이하로 떨어진 경우 사지 않도록 하는 설정(변경 가능)
            self.invest_min_limit_rate = 0.98


        elif self.simul_num == 3:

            # 시뮬레이팅 시작 일자

            self.simul_start_date = "20190101"

            ######### 알고리즘 선택 #############

            # 매수 리스트 설정 알고리즘 번호

            self.db_to_realtime_daily_buy_list_num = 3

            # 매도 리스트 설정 알고리즘 번호

            self.sell_list_num = 2

            ###################################

            # 초기 투자자금
            # 주의! start_invest_price 는 모의투자 초기 자본금과 별개. 시뮬레이션에서만 적용.
            # 키움증권 모의투자의 경우 초기에 모의투자 신청 할 때 설정 한 금액으로 자본금이 설정됨
            self.start_invest_price = 10000000

            # 매수 금액
            self.invest_unit = 3000000

            # 자산 중 최소로 남겨 둘 금액
            self.limit_money = 1000000

            # 익절 수익률 기준치
            self.sell_point = 10

            # 손절 수익률 기준치
            self.losscut_point = -2

            # 실전/모의 봇 돌릴 때 매수하는 순간 종목의 최신 종가 보다 1% 이상 오른 경우 사지 않도록 하는 설정(변경 가능)
            self.invest_limit_rate = 1.01
            # 실전/모의 봇 돌릴 때 매수하는 순간 종목의 최신 종가 보다 -2% 이하로 떨어진 경우 사지 않도록 하는 설정(변경 가능)
            self.invest_min_limit_rate = 0.98
        else:
            logger.error("해당 되는 알고리즘이 없습니다. 알고리즘을 추가해주세요. ")
            sys.exit(1)
        `````````````````````````````````````````````````````````````````````````````````````````````````````````



        c) db_to_realtime_daily_buy_list 에 아래 10번 알고리즘 추가
        `````````````````````````````````````````````````````````````````````````````````````````````````````````
         # 거래대금 self.total_tr_price 이상 / 실시간 전일비 TOP5 매수 알고리즘

        elif self.db_to_realtime_daily_buy_list_num == 10:
            import naver_multi_crawler
            date_rows_yesterday = self.get_recent_daily_buy_list_date()
            today_min_date = datetime.datetime.today().strftime("%Y%m%d%H%M")
            naver_multi_crawler.run_crawl(today_min_date)
            # daily_buy_list DB에서 가장 최근 날짜(매수하는 날 기준 어제 날짜가 Return)
            sql= "SELECT YES_DAILY.* " \
                f"FROM `{date_rows_yesterday}` YES_DAILY ,naver_min_crawl NAVER " \
                "WHERE YES_DAILY.code = NAVER.code "\
                f"AND NAVER.date = '{today_min_date}' "\
                f"AND NAVER.close * NAVER.volume > {self.total_tr_price} "\
                "AND (NAVER.close-YES_DAILY.close)/YES_DAILY.close*100 < 20 " \
                "AND (exists (SELECT null FROM stock_kospi KOSPI WHERE YES_DAILY.code=KOSPI.code) "\
                "OR exists (SELECT null FROM stock_kosdaq KOSDAQ WHERE YES_DAILY.code=KOSDAQ.code)) "\
                "ORDER BY (NAVER.close-YES_DAILY.close)/YES_DAILY.close*100 DESC "\
                "LIMIT 5"

            # 아래 명령을 통해 테이블로 부터 데이터를 가져오면 리스트 형태로 realtime_daily_buy_list 에 담긴다.
            realtime_daily_buy_list = self.engine_daily_buy_list.execute(sql).fetchall()


            # 아래 명령을 통해 테이블로 부터 데이터를 가져오면 리스트 형태로 realtime_daily_buy_list 에 담긴다.
            realtime_daily_buy_list = self.engine_daily_buy_list.execute(sql).fetchall()
        `````````````````````````````````````````````````````````````````````````````````````````````````````````


        d) invest_limit_rate, invest_min_limit_rate 설정 변경
            # 실전/모의 봇 돌릴 때 매수하는 순간 종목의 최신 종가 보다 1% 이상 오른 경우 사지 않도록 하는 설정(변경 가능)
            self.invest_limit_rate = 100
            # 실전/모의 봇 돌릴 때 매수하는 순간 종목의 최신 종가 보다 -2% 이하로 떨어진 경우 사지 않도록 하는 설정(변경 가능)
            self.invest_min_limit_rate = -100


    2. open_api.py
        def get_today_buy_list 함수의 if self.sf.is_simul_table_exist 위에 아래 로직 추가
            `````````````````````````````````````````````````````````````````````````````````````````````````````````
            # 촬영 후 아래 코드 수정 되었습니다.
            # naver 실시간 크롤링 매수,  현재 시간이 buy_start_time(매수 시작 시간) 을 지나는 순간 매수 시작
            if self.sf.use_realtime_crawl:
                if self.sf.buy_start_time <= QTime.currentTime():
                    # 전달 되는 인자 값들은 today, yesterday, i(self.date_rows 인덱스)
                    self.sf.db_to_realtime_daily_buy_list(self.today, self.sf.date_rows[-1][0], len(self.sf.date_rows))
                else:
                    return
            `````````````````````````````````````````````````````````````````````````````````````````````````````````

    3.cf.py
        imi1_simul_num = 15 로 변경

    4.trader.py
        variable_setting에서 테스트용 시간으로 변경

** 예제 쿼리
SELECT YES_DAILY.code_name, YES_DAILY.close, NAVER.close, (NAVER.close-YES_DAILY.close)/YES_DAILY.close*100
FROM `20200720` YES_DAILY ,naver_min_crawl NAVER
WHERE YES_DAILY.code = NAVER.code #naver_min_crawl과 YES_DAILY테이블과 join
AND NAVER.date = '202007211540'
AND NAVER.close * NAVER.volume > 1000000000 #거래대금 조건
AND (NAVER.close-YES_DAILY.close)/YES_DAILY.close*100 < 20 #전일비 20퍼센트 이하인 종목
AND (exists (SELECT null FROM stock_kospi KOSPI WHERE YES_DAILY.code=KOSPI.code)
OR exists (SELECT null FROM stock_kosdaq KOSDAQ WHERE YES_DAILY.code=KOSDAQ.code))
ORDER BY (NAVER.close-YES_DAILY.close)/YES_DAILY.close*100 DESC #전일비 내림차순 정렬
LIMIT 5 #전일비 기준 가장 많이 상승한 종목 TOP5
